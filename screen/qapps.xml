<?xml version="1.0" encoding="UTF-8"?>
<!--
This software is in the public domain under CC0 1.0 Universal plus a 
Grant of Patent License.

To the extent possible under law, the author(s) have dedicated all
copyright and related and neighboring rights to this software to the
public domain worldwide. This software is distributed without any
warranty.

You should have received a copy of the CC0 Public Domain Dedication
along with this software (see the LICENSE.md file). If not, see
<http://creativecommons.org/publicdomain/zero/1.0/>.
-->
<screen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/xml-screen-2.1.xsd"
        require-authentication="false" screen-theme-type-enum-id="STT_INTERNAL_QUASAR" default-menu-title="Applications" allow-extra-path="true">
    <!-- NOTE: require-authentication=false so no permission required but in pre-actions if no user logged in goes to login screen -->

    <pre-actions><script><![CDATA[
        // if user not logged in save current path and params then redirect to Login
        if (!ec.user.userId) { ec.web.saveScreenLastInfo(null, null); sri.sendRedirectAndStopRender('/Login') }

        // TODO move stylesheets to the STT_INTERNAL_QUASAR theme (QuasarThemeData.xml), once stabilized
        html_stylesheets.add('/qstatic/WebrootVue.qvt.css')

        // TODO consider using material icons instead of font-awesome - ISSUE: there are many XML Screen files with 'fa-' references
        html_stylesheets.add('https://fonts.googleapis.com/css?family=Roboto:100,300,400,500,700,900|Material+Icons+Outlined')
        html_stylesheets.add('/libs/font-awesome/css/font-awesome.min.css')
        // from Quasar docs, not valid? html_stylesheets.add('https://use.fontawesome.com/releases/v5.0.13/css/all.cs')
        html_stylesheets.add('https://cdn.jsdelivr.net/npm/quasar@1.11.2/dist/quasar.min.css')

        html_scripts.add('/libs/moment.js/moment-with-locales.min.js')
        // TODO: can we get away with not using jQuery?
        html_scripts.add('/libs/jquery/jquery.min.js')
        html_scripts.add('/js/MoquiLib.min.js')

        // TODO: use jQuery + jquery-validate or build alternative to this
        // jquery-validate locale specific scripts
        // Map validateScriptsOut = ec.service.sync().name("webroot.LocaleServices.get#ValidateLocaleScripts").call()
        // if (validateScriptsOut.messagesLocation) html_scripts.add(validateScriptsOut.messagesLocation)
        // if (validateScriptsOut.methodsLocation) html_scripts.add(validateScriptsOut.methodsLocation)

        String instancePurpose = System.getProperty("instance_purpose")
        if (!instancePurpose || instancePurpose == 'production') {
            /* ========== Production Mode ========== */
            // Vue JS
            footer_scripts.add('/libs/vue/vue.js') // TODO change to vue.min.js
            // Webroot Quasar-Vue instance, in footer so runs after page loaded
            footer_scripts.add('/qstatic/WebrootVue.qvt.js')
        } else {
            /* ========== Dev Mode ========== */
            // Vue JS
            footer_scripts.add('/libs/vue/vue.js')
            // Quasar
            footer_scripts.add('https://cdn.jsdelivr.net/npm/quasar@1.11.2/dist/quasar.umd.min.js')
            // Webroot Quasar-Vue instance, in footer so runs after page loaded
            footer_scripts.add('/qstatic/WebrootVue.qvt.js')
        }

        // conditional QZ Tray scripts, only include if enabled
        if (ec.user.getPreference("qz.print.enabled") == "true") {
            footer_scripts.add('/js/qz-tray/sha-256.min.js')
            footer_scripts.add('/js/qz-tray/qz-tray.min.js')
            footer_scripts.add('/js/qz-tray/MoquiQzComponent.js')
        }
    ]]></script></pre-actions>

    <widgets>
        <render-mode>
            <!-- for html just render the navbar (Vue page wrapper and nav component) -->
            <text type="html" location="component://moqui-quasar/screen/includes/WebrootVue.qvt.ftl"/>
            <!-- not meant to be used for anything else, for all other render modes go directly through /apps -->
        </render-mode>
    </widgets>
</screen>
